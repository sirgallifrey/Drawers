// <auto-generated />
using System;
using Drawers.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Drawers.Persistence.Migrations
{
    [DbContext(typeof(DrawersDbContext))]
    [Migration("20190216183310_instable")]
    partial class instable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Drawers.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Drawers.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int?>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PersonId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Drawers.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Birthdate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Drawers.Domain.Entities.PersonPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PhoneNumberId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("PersonPhoneNumber");
                });

            modelBuilder.Entity("Drawers.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode");

                    b.Property<string>("Number");

                    b.Property<int?>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("Drawers.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Drawers.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Drawers.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Drawers.Domain.Entities.Person", b =>
                {
                    b.OwnsOne("Drawers.Domain.ValueObjects.CPF", "Cpf", b1 =>
                        {
                            b1.Property<int>("PersonId");

                            b1.Property<string>("Value");

                            b1.HasKey("PersonId");

                            b1.ToTable("People");

                            b1.HasOne("Drawers.Domain.Entities.Person")
                                .WithOne("Cpf")
                                .HasForeignKey("Drawers.Domain.ValueObjects.CPF", "PersonId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Drawers.Domain.Entities.PersonPhoneNumber", b =>
                {
                    b.HasOne("Drawers.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("Drawers.Domain.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId");
                });

            modelBuilder.Entity("Drawers.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("Drawers.Domain.Entities.Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
